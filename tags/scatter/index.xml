
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>scatter on DATAVIZ.KZ</title>
   <link>https://shakraz.github.io/tags/scatter/</link>
   <description>Recent content in scatter on DATAVIZ.KZ</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2019 - Oraz Shakirov</copyright>
   <lastBuildDate>Sun, 15 Mar 2020 12:15:04 -0400</lastBuildDate>
   
       <atom:link href="https://shakraz.github.io/tags/scatter/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Республиканский бюджет</title>
       <link>https://shakraz.github.io/blogs/fiscal/</link>
       <pubDate>Sun, 30 Aug 2020 14:11:45 -0400</pubDate>
       
       <guid>https://shakraz.github.io/blogs/fiscal/</guid>
       <description>&lt;p&gt;Простая визуализая республиканского бюджета (включая доходную часть).
Данные взяты из   &lt;a href=&#34;https://online.zakon.kz/m/document/?doc_id=36662380&#34;&gt;закона&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;obs-notebook&#34;&gt;
  &lt;div id=&#34;level&#34;&gt;&lt;/div&gt;
  &lt;div id=&#34;chart&#34;&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;script type=&#34;module&#34;&gt;
  
  import {Runtime, Inspector} from &#34;https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js&#34;;

  
  import notebook from &#34;https:\/\/api.observablehq.com\/@datavizkz\/fiscal-budget.js&#34;;

  
  
  
  
  const renders = {
    &#34;viewof level&#34;: &#34;#level&#34;,
    &#34;chart&#34;: &#34;#chart&#34;,
  };

  Runtime.load(notebook, (variable) =&gt; {
    const selector = renders[variable.name];
    if (selector) {
      return new Inspector(document.querySelector(selector));
    }
  });

  
&lt;/script&gt;

&lt;style&gt;
    #obs-notebook {
      font-size: 0.8em;
      background: #fdfdfd;
      border-radius: 4px;
      border: 1px solid #ccc;
      padding: 9px;
    }
&lt;/style&gt;
</description>
     </item>
   
     <item>
       <title>Доля расходов на продукты по регионам</title>
       <link>https://shakraz.github.io/blogs/spendings/</link>
       <pubDate>Tue, 25 Aug 2020 00:06:24 -0400</pubDate>
       
       <guid>https://shakraz.github.io/blogs/spendings/</guid>
       <description>&lt;p&gt;Продолжайю экспереметировать с d3.
Считается, что чем меньше тратится на продукты, тем развитее страна/регион. Тем интереснее посмотреть статистику изменения
этой доли для различных регионов Казахстана.&lt;/p&gt;
&lt;html lang=&#34;Ru&#34;&gt;
&lt;head&gt;
  &lt;meta charset=&#34;utf-8&#34; /&gt;
  &lt;script type=&#34;text/javascript&#34; src=&#34;https://shakraz.github.io/js/d3.js&#34;&gt;&lt;/script&gt;
  &lt;style&gt;
.x-axis{
  font-size: 8;
}
#charts{
  padding: 10px;
}
svg{
	margin:10px;
}
#container{
  width: 100%;
&lt;p&gt;margin-left:auto;
margin-right: auto;
}
.line{
stroke: steelblue;
fill:none;
}
.area{
fill:steelblue;
opacity: 60%;
}
.y-axis,.x-axis{
opacity: 60%;
}&lt;/p&gt;
&lt;p&gt;.tooltip circle{
fill:steelblue;
}
.tooltip rect{
stroke: #ccc;
}
.tooltip-value{
font-size: :10;
}
.popup{
fill: white;
stroke: #000;
}
.overlay {
fill: none;
pointer-events: all;
}&lt;/p&gt;
&lt;p&gt;select{
margin: 20px;
font-size: 12px;
}&lt;/p&gt;
&lt;p&gt;h3,p{
margin:0;
}
#header{
margin: 20px;
font-family: Roboto;
}
&lt;/style&gt;&lt;/p&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id=&#34;container&#34;&gt;
    &lt;div id=&#34;header&#34;&gt;
    &lt;a style=&#34;font-style: italic;color: #ccc&#34; href=&#34;https://taldau.stat.gov.kz/ru/NewIndex/GetIndex/704481?keyword=&#34; target=&#34;_blank&#34;&gt;На основе данных МНЭ РК&lt;/a&gt;
  &lt;/div&gt;
    &lt;select id=&#34;category&#34;&gt;&lt;/select&gt;
&lt;div id = &#34;charts&#34;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;p&gt;Еще думал добавить сравнение с предыдущим годом, но не стал, так как это перегрузит график.&lt;/p&gt;
&lt;/body&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://shakraz.github.io/data/spendings.json&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://d3js.org/d3-array.v2.min.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;



		var full_data = prepareData(spendings)

		drawCharts()



		function prepareData(){

		   
		  
		  spendings.forEach(d=&gt;{
		    d.periods.forEach(t=&gt;{
		      t.value= +t.value
		      t.date = d3.timeParse(&#34;%d.%m.%Y&#34;)(t.date)
		      t.year = d3.timeFormat(&#34;%Y&#34;)(t.date)
		      t.year = +t.year
		    })
		  })

		  spendings = spendings.filter(d=&gt;d.termNames[1]==&#34;Всего&#34; &amp;&amp; d.termNames[0]!=&#34;ТУРКЕСТАНСКАЯ ОБЛАСТЬ&#34; &amp;&amp; d.termNames[0]!=&#34;Г.ШЫМКЕНТ&#34;)
		  



		  flat = []
		  spendings.forEach(function(region) {
		    region.periods.forEach(function(period) {
		      flat.push({
		        region: region.termNames[0],
		        category: region.termNames[2],
		        value: period.value,
		        year: period.year
		      });
		    });
		  });

		  flat = flat.sort((a,b)=&gt; d3.ascending(a.year, b.year))

		  total = d3.nest()
		            .key(d=&gt;d.region)
		            .key(d=&gt;d.year)
		            .rollup(d=&gt;d3.sum(d,t=&gt;t.value))
		            .entries(flat)
		  total_flat = []

		  total.forEach(r=&gt;{

		    r.values.forEach(v=&gt;{

		      total_flat.push({
		        region:r.key,
		        category:&#34;Всего&#34;,
		        value:v.value,
		        year:v.key
		      })

		    })
		  })

		  total_flat.forEach(d=&gt;{
		    d.year = +d.year
		  })

		  flat=total_flat.concat(flat) //concat aggregated values by category
		  return flat
		}







		function drawCharts(){

		  flat =full_data
		 d3.select(&#34;#category&#34;)
		    .selectAll(&#34;option&#34;)
		    .data(d3.map(flat,d=&gt;d.category).keys())
		    .enter()
		    .append(&#34;option&#34;)
		    .property(&#34;selected&#34;,d=&gt;d==&#34;Всего&#34;)
		    .text(d=&gt;d)
		  

		  var margin = {left:35, right:0, top:20, bottom:20}
		  var outer_width = 250, outer_height=150;
		  var width  = outer_width-margin.left-margin.right;
		  var   height = outer_height-margin.top-margin.bottom;
		  

		  var x = d3.scaleLinear().range([0,width])
		  var y = d3.scaleLinear().range([height,0])
		  var regions = d3.map(flat,d=&gt;d.region).keys()
		  var svg =d3.select(&#34;#charts&#34;)
		                    .selectAll(&#34;svg&#34;)
		                    .data(regions)
		                    .enter()
		                    .append(&#34;svg&#34;)
		                    .attr(&#34;width&#34;,outer_width)
		                    .attr(&#34;height&#34;,outer_height)
		                    .append(&#34;g&#34;)
		                    .classed(&#34;mini_chart&#34;,true)
		                    .attr(&#34;transform&#34;,&#34;translate(&#34;+margin.left+&#34;,&#34;+margin.top+&#34;)&#34;)
		  
		  svg.append(&#34;path&#34;).attr(&#34;class&#34;,&#34;line&#34;)

		  svg.append(&#34;path&#34;).attr(&#34;class&#34;,&#34;area&#34;)
		  svg.append(&#34;text&#34;).attr(&#34;class&#34;,&#34;title&#34;)


		 var xAxis=svg.append(&#34;g&#34;)
		               .attr(&#34;class&#34;,&#34;x-axis&#34;)
		               .attr(&#34;transform&#34;,&#34;translate(0,&#34;+height+&#34;)&#34;)
		 

		 var yAxis =  svg.append(&#34;g&#34;)
		                 .attr(&#34;class&#34;,&#34;y-axis&#34;)

		  update(d3.select(&#34;#category&#34;).property(&#34;value&#34;))

		  function update(input){

		       flat = full_data.filter(d=&gt;d.category==input)
		       flat_nested =  d3.nest()
		                     .key(d=&gt;d.region+&#34;|&#34;+d.category)
		                     .entries(flat)

		        max_value=d3.max(flat,d=&gt;d.value)
		        y.domain([0,max_value])
		        ex=d3.extent(flat,d=&gt;d.year)
		        x.domain(ex)

		        svg.selectAll(&#34;.x-axis&#34;)
		           .transition().duration(600)
		           .attr(&#34;transform&#34;,&#34;translate(0,&#34;+height+&#34;)&#34;)
		           .call(d3.axisBottom(x)
        				   .tickFormat(d3.format(&#34;&#34;)))

		        svg.selectAll(&#34;.y-axis&#34;)
		           .transition().duration(600)
		           .call(d3.axisLeft(y)
		                      .tickFormat(d =&gt; d + &#34;%&#34;)
		                      .ticks(5))

		        var line = d3.line().curve(d3.curveBasis)
		                      .x(d=&gt;x(d.year))
		                      .y(d=&gt;y(d.value))

		         var area = d3.area().curve(d3.curveBasis)
		                      .x(d=&gt;x(d.year))
		                      .y1(d=&gt;y(d.value))
		                      .y0(y(0))

		      
		        d3.selectAll(&#34;.mini_chart&#34;)
		        .data(flat_nested)
		        .each(function(d,i){
		           
		        var lines=  d3.select(this).select(&#34;path.line&#34;).data([d])
		         lines.exit().remove()


		        lines.enter().append(&#34;path&#34;).merge(lines)
		             .transition().duration(700)
		             .attr(&#34;class&#34;,&#34;line&#34;)
		             .attr(&#34;d&#34;,d=&gt;line(d.values)) 



		        var areas = d3.select(this).select(&#34;path.area&#34;).data([d])
		        areas.exit().remove()

		          areas.enter().append(&#34;path&#34;).merge(areas)
		             .transition().duration(700)
		             .attr(&#34;class&#34;,&#34;area&#34;)
		             .attr(&#34;d&#34;,t=&gt;area(t.values)) 


		        var label = d3.select(this).select(&#34;.title&#34;).data([d])

		        label.exit().remove()

		        label.enter().append(&#34;text&#34;)
		             .merge(label)
		             .attr(&#34;class&#34;,&#34;title&#34;)
		             .attr(&#34;text-anchor&#34;, &#34;start&#34;)
		             .attr(&#34;y&#34;, -5)
		             .attr(&#34;x&#34;, 0)
		             .text(d=&gt;d.key.split(&#34;|&#34;)[0])
		             .attr(&#34;style&#34;,&#34;font-size:10&#34;) 
		      }
		  
		  )


		 }

		  var bisectDate = d3.bisector(function(d) { return d.year; }).left

		 //tooltip for all charts
		 var tooltip = svg.append(&#34;g&#34;)
		                  .attr(&#34;id&#34;,d=&gt;d.key)
		                  .attr(&#34;class&#34;,&#34;tooltip&#34;)
		                  .style(&#34;display&#34;,&#34;none&#34;)
		  
		  
		tooltip.append(&#34;circle&#34;)
		            .attr(&#34;r&#34;, 5);

		tooltip.append(&#34;rect&#34;)
		       .attr(&#34;class&#34;, &#34;popup&#34;)
		       .attr(&#34;width&#34;, 80)
		       .attr(&#34;height&#34;, 50)
		       .attr(&#34;x&#34;, 10)
		       .attr(&#34;y&#34;, -22)
		       .attr(&#34;rx&#34;, 4)
		       .attr(&#34;ry&#34;, 4);

		tooltip.append(&#34;text&#34;)
		       .attr(&#34;class&#34;, &#34;tooltip-date&#34;)
		       .attr(&#34;x&#34;, 18)
		       .attr(&#34;y&#34;, -2);

/*		tooltip.append(&#34;text&#34;)
		       .attr(&#34;x&#34;, 18)
		       .attr(&#34;y&#34;, 18)
		       .text(&#34;Доля:&#34;); */

		tooltip.append(&#34;text&#34;)
		       .attr(&#34;class&#34;, &#34;tooltip-likes&#34;)
		       .attr(&#34;x&#34;, 20)
		       .attr(&#34;y&#34;, 18)



		  svg.append(&#34;rect&#34;)
		    .attr(&#34;id&#34;,d=&gt;d.key.split(&#34;|&#34;)[0])
		    .attr(&#34;class&#34;, &#34;overlay&#34;)
		    .attr(&#34;width&#34;, width)
		    .attr(&#34;height&#34;, height)
		    .on(&#34;mouseover&#34;, function() { tooltip.style(&#34;display&#34;, null); })
		    .on(&#34;mouseout&#34;, function() { tooltip.style(&#34;display&#34;, &#34;none&#34;); })
		    .on(&#34;mousemove&#34;, mousemove);





		function mousemove() {
		            id = d3.select(this).attr(&#34;id&#34;)
		            current_category=d3.select(&#34;#category&#34;).property(&#34;value&#34;)
		            data = full_data.filter(d=&gt;d.region==id &amp;&amp; d.category==current_category)
		          
		            var x0 = x.invert(d3.mouse(this)[0]),
		                i = bisectDate(data, x0, 1),
		                d0 = data[i - 1],
		                d1 = data[i],
		                d = x0 - d0.year &gt; d1.year - x0 ? d1 : d0

		            updateTooltips(d)
		        }

		function updateTooltips(d){

		  current_category=d3.select(&#34;#category&#34;).property(&#34;value&#34;)
		  var tooltips= d3.selectAll(&#34;.tooltip&#34;)
		                  .attr(&#34;transform&#34;,c=&gt;{
		                  var val =full_data.filter(t=&gt;t.region==c.key.split(&#34;|&#34;)[0] 
		                                            &amp;&amp; t.year==d.year 
		                                            &amp;&amp; t.category==current_category)[0]

		                   
		                   return  &#34;translate(&#34; + x(d.year) + &#34;,&#34; + y(val.value) + &#34;)&#34;
		                                         } )
		                  
		    
		    tooltips.select(&#34;.tooltip-date&#34;).text(d.year)


		    tooltips.select(&#34;.tooltip-likes&#34;).text(c=&gt;{

		  current_category=d3.select(&#34;#category&#34;).property(&#34;value&#34;)
		       var val =full_data.filter(t=&gt;t.region==c.key.split(&#34;|&#34;)[0] 
		                                            &amp;&amp; t.year==d.year 
		                                            &amp;&amp; t.category==current_category)[0]
		       
		      return d3.format(&#34;.0%&#34;)(val.value/100)
		    }) 
		    
		    

		}


		  var select = d3.select(&#34;#category&#34;)
		    .on(&#34;change&#34;, function() {
		      update(this.value)
		    })


		}
&lt;/script&gt;
</description>
     </item>
   
     <item>
       <title>1001-й covid-дашборд</title>
       <link>https://shakraz.github.io/blogs/covid/</link>
       <pubDate>Tue, 14 Jul 2020 23:04:57 -0400</pubDate>
       
       <guid>https://shakraz.github.io/blogs/covid/</guid>
       <description>&lt;hr&gt;
&lt;h2 id=&#34;идея&#34;&gt;Идея&lt;/h2&gt;
&lt;p&gt;Простой интерактивный отчет по ковид-статистике  Казахстана и других стран. Вдохновился &lt;a href=&#34;https://www.youtube.com/post/UgynI5LW6kpMqDvkqz54AaABCQ&#34;&gt;постом&lt;/a&gt; известного казахстанского журналиста Вадима Борейко.&lt;/p&gt;
&lt;h2 id=&#34;данные&#34;&gt;Данные&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Данные взяты с &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;репозитория университета Джонса Хопхинса (США)&lt;/a&gt; на 07.14. К сожалению, детальных данных по регионам не нашел (привет, egov и хваленые открытые данные). Если у кого есть заслуживающий доверия источник, буду благодарен, если поделитесь.иТакже добавил усредненные значения для всех стран за исключением КЗ (World).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Смертность (%)-процент смертей к количеству заболевших&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Прирост- новые случаи с предыдущего дня&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;как-пользоваться&#34;&gt;Как пользоваться&lt;/h2&gt;
&lt;p&gt;Выбрать интересующий период и страну(ы). Также можно выбрать показатель (применимо только к &amp;ldquo;Тренд&amp;rdquo; и &amp;ldquo;Средние значения(квантили)&amp;quot;)&lt;/p&gt;
&lt;iframe src=&#39;http://52.144.47.109:3838/sample-apps/covid_shiny/&#39; style=&#34;border: 0&#34; width=&#34;100%&#34; height=&#34;1200&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;вывод&#34;&gt;Вывод&lt;/h2&gt;
&lt;p&gt;Данные КЗ по смертности на первый взгляд действительно выглядят странно (особенно  принимая во внимание новые случаи на 100000 населения, который более-менее одинаков для КЗ/мир). Однако это очень поверхностный вывод поскольку не анализировались выбросы, нормальность распределения и многое другое.&lt;/p&gt;
&lt;p&gt;Пост будет обновляться, добавлю новые чарты и метрики.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Источники данных</title>
       <link>https://shakraz.github.io/blogs/sources/</link>
       <pubDate>Wed, 29 Apr 2020 18:13:48 -0400</pubDate>
       
       <guid>https://shakraz.github.io/blogs/sources/</guid>
       <description>&lt;p&gt;Редко когда получается найти данные сразу пригодные для визуализации, чаще всего этому предшествует большой объем подготовительной работы. Ниже представлен небольшой список источников данных, которым я пользуюсь.&lt;/p&gt;
&lt;h2 id=&#34;открыте-данные-электронного-правительстваdataegovkz&#34;&gt;&lt;a href=&#34;data.egov.kz&#34;&gt;Открыте данные электронного правительства&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Насколько дорогой, настолько и бесполезный сайт. Если запастить терпением и дождаться, когда загрузиться главная, можно убедиться в следующих недостатках:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ограничение на загрузку&lt;/strong&gt; Трудно понять, чем руководствовались, когда задавали лимит только в 100 строк.&lt;img src=&#34;https://shakraz.github.io/images/egov.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;Ценность данных. Огромное количество никому не нужных списков и справочников.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;комитет-статистики-ркtaldaustatgovkz&#34;&gt;&lt;a href=&#34;taldau.stat.gov.kz&#34;&gt;Комитет статистики РК&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Самый полезный источник. Огромное количество информации в различных разрезах. Есть внутренний построитель отчетов&lt;/p&gt;
&lt;h2 id=&#34;комитет-по-правовой-статистикеhttpsqamqorgovkzanalyticsindexhtml&#34;&gt;&lt;a href=&#34;https://qamqor.gov.kz/analytics/index.html&#34;&gt;Комитет по правовой статистике&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Почти не пользовался. На момент написания, так и не загрузился.&lt;/p&gt;
&lt;h2 id=&#34;scrapping&#34;&gt;Scrapping&lt;/h2&gt;
&lt;p&gt;Строго говоря, это не источник, конечно. Скорее, инструмент. Но для всех, кто интересуется, обязателен к освоению.  Чаще всего пользуюсь связкой &lt;a href=&#34;rstudio.com&#34;&gt;RStudio&lt;/a&gt;/&lt;a href=&#34;https://github.com/tidyverse/rvest&#34;&gt;rvest&lt;/a&gt;. Есть еще &lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;&gt;BeautifulSoup&lt;/a&gt;, для тех, кто знает Python.&lt;/p&gt;
&lt;h2 id=&#34;osm&#34;&gt;OSM&lt;/h2&gt;
&lt;p&gt;Незаменимый источник geo данных. Чаще всего пользуюсь интерфейсом &lt;a href=&#34;https://nominatim.openstreetmap.org/&#34;&gt;Nominatim&lt;/a&gt;. Из недостатков отмечу качество данных и их актуальность.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Сравнение жилищных комплексов г. Алматы</title>
       <link>https://shakraz.github.io/blogs/rating/</link>
       <pubDate>Sat, 18 Apr 2020 14:39:24 -0400</pubDate>
       
       <guid>https://shakraz.github.io/blogs/rating/</guid>
       <description>&lt;h2 id=&#34;идея&#34;&gt;Идея&lt;/h2&gt;
&lt;p&gt;Те, кто покупал жилье (а значит, почти все), знают, как иногда трудно сравнить между собой имеющиеся варианты. Десятки разных факторов влияют на окончательный выбор, причем цена самый очевидный из них. В конце концов, при прочих равных, оставливаются на пересечении   &lt;strong&gt;хороший дом/хорошая квартира&lt;/strong&gt;.  Вопрос - как измерить &amp;ldquo;хороший дом&amp;rdquo; или &amp;ldquo;хорошая квартира&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;реализация&#34;&gt;Реализация&lt;/h2&gt;
&lt;p&gt;Для каждого ЖК нужно рассчитать два дополнительных рейтинга : &lt;strong&gt;flat_rate&lt;/strong&gt; и &lt;strong&gt;building_rate&lt;/strong&gt;. Действительно, дом сам по себе может быть
исключительно хорошим (мало домов, мало квартир, подземный паркинг, материалы итд) но квартиры могут оставлять лучшего (низкие потолки, маленькая площадь, отсутствие отделки). Перекодировав эти факторы в численные (почти все они ordered, что облегчает задачу), можно рассчитать необходимые значения. Поскольку данные разного масштаба, в процессе применялось логарифмирование и нормирование&lt;/p&gt;
&lt;p&gt;flat_rate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;минимальная площадь (чем больше, тем лучше)&lt;/li&gt;
&lt;li&gt;отделка&lt;/li&gt;
&lt;li&gt;этажность (чем выше, тем хуже)&lt;/li&gt;
&lt;li&gt;высота потолков&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;building_rate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;класс&lt;/li&gt;
&lt;li&gt;паркинг&lt;/li&gt;
&lt;li&gt;кол-во домов (чем больше, тем хуже)&lt;/li&gt;
&lt;li&gt;кол-во квартир (аналогично)&lt;/li&gt;
&lt;li&gt;технология (панели хуже, чем кирпич итд)&lt;/li&gt;
&lt;li&gt;двор (закрытый лучше, чем открытый)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;как-пользоваться&#34;&gt;Как пользоваться&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Выбрать интересующий район.&lt;/li&gt;
&lt;li&gt;Красные линии это средние значения, все, что выше/правее среднего, может быть потенциально интересно&lt;/li&gt;
&lt;li&gt;Выделить точки на графике, размер точки пропорционален стоймости кв.метра&lt;/li&gt;
&lt;/ul&gt;
&lt;html dir=&#34;ltr&#34; lang=&#34;en&#34;&gt;
&lt;head&gt;
&lt;meta charset=&#34;utf-8&#34;&gt;
&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://shakraz.github.io/css/rating.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://shakraz.github.io/css/dc.css&#34;&gt;
&lt;/head&gt;
&lt;div class=&#39;main&#39;&gt;
&lt;div id=&#34;chart&#34;&gt;	
&lt;/div&gt;
&lt;a href=&#34;javascript:dc.filterAll(); dc.renderAll();&#34; style=&#34;font-size:10px&#34;&gt;Сбросить все фильтры&lt;/a&gt;
&lt;div id=&#34;search&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;filter1&#34;&gt;&lt;p&gt;Район&lt;/p&gt;&lt;/div&gt;
&lt;div id=&#34;filter2&#34;&gt;&lt;p&gt;Класс жилья&lt;/p&gt;&lt;/div&gt;  
&lt;/div&gt;
&lt;script src=&#34;https://shakraz.github.io/js/d3.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://shakraz.github.io/js/dc.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://shakraz.github.io/js/crossfilter.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://shakraz.github.io/js/zk2.js&#34;  type=&#34;text/javascript&#34;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;h2 id=&#34;вывод&#34;&gt;Вывод&lt;/h2&gt;
&lt;p&gt;Понятно, что это очень упрощенный подход. Не учитывалась локация, инфраструктура и многое другое. Но это уже дело техники.
Оценку можно значительно улучшить присвоив каждому фактору вес,его можно вычислить опытным путем либо опросить экспертов.
Вы можете заполнить форму и указать, какой,по вашему мнению, вес имеет каждый из факторов.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Сравнение цен на недвижимость в Алматы до и после девальвации</title>
       <link>https://shakraz.github.io/blogs/third_post/</link>
       <pubDate>Tue, 14 Apr 2020 00:13:24 -0400</pubDate>
       
       <guid>https://shakraz.github.io/blogs/third_post/</guid>
       <description>&lt;h2 id=&#34;идея&#34;&gt;Идея&lt;/h2&gt;
&lt;p&gt;Простейший дашборд с поддержкой мобильной версии.&lt;/p&gt;
&lt;h2 id=&#34;как-пользоваться&#34;&gt;Как пользоваться&lt;/h2&gt;
&lt;p&gt;Просто выберите фильтры (Район, Микрорайон, Состояние, Количество комнат, Опубликовавший)&lt;/p&gt;
&lt;html dir=&#34;ltr&#34; lang=&#34;en&#34;&gt;
&lt;head&gt;
&lt;meta charset=&#34;utf-8&#34;&gt;
&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://shakraz.github.io/css/dashboard.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://shakraz.github.io/css/dc.css&#34;&gt;
&lt;/head&gt;
&lt;div class=&#34;main&#34;&gt;
&lt;p&gt;&lt;a href=&#34;javascript:dc.filterAll(); dc.renderAll();&#34;&gt;Сбросить все фильтры&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;container&#34;&gt;
&lt;div id=&#34;filter&#34;&gt;
&lt;ul&gt;
&lt;li id=&#34;select1&#34;&gt;&lt;/li&gt;
&lt;li id=&#34;select2&#34;&gt;&lt;/li&gt;
&lt;li id=&#34;select3&#34;&gt;&lt;/li&gt;
&lt;li id=&#34;select4&#34;&gt;&lt;/li&gt;
&lt;li id=&#34;select5&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;piechart&#34;&gt;
&lt;h3&gt;Состояние&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;rowchart&#34;&gt;
&lt;h3&gt;Материал дома&lt;/h3&gt;&lt;/div&gt;
&lt;div id=&#34;boxplot&#34;&gt;&lt;h3&gt;Квантильные значения цен&lt;/h3&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&#34;https://shakraz.github.io/js/d3.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://shakraz.github.io/js/dc.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://shakraz.github.io/js/crossfilter.js&#34; &gt;&lt;/script&gt;
&lt;script src=&#34;https://shakraz.github.io/js/charts.js&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;h2 id=&#34;вывод&#34;&gt;Вывод&lt;/h2&gt;
&lt;p&gt;Хочу добавить карту, думаю, будет интересно.
В целом, ответить  однозначно как повлияла девальвация на цены, трудно. Однако, видно, что хозяева склонны к снижению цен. Тогда как риэлторы и прочие посредники-наоборот&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Сальдо внешней миграции по специальностям и регионам за 2000-2019 гг.</title>
       <link>https://shakraz.github.io/blogs/saldo/</link>
       <pubDate>Sun, 15 Mar 2020 14:18:10 -0400</pubDate>
       
       <guid>https://shakraz.github.io/blogs/saldo/</guid>
       <description>&lt;h2 id=&#34;идея&#34;&gt;Идея&lt;/h2&gt;
&lt;p&gt;Визуализация сальдо миграции в разрезе областей и специальностей. Показаны агрегированные значения&lt;/p&gt;
&lt;h2 id=&#34;данные&#34;&gt;Данные&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://taldau.stat.gov.kz/ru&#34;&gt;Комитет Статистики РК&lt;/a&gt;&lt;/p&gt;
&lt;html dir=&#34;ltr&#34; lang=&#34;en&#34;&gt;
&lt;head&gt;
  &lt;meta charset=&#34;utf-8&#34;&gt;
&lt;style&gt; 
.names{font-size:12px} body{font-family:Roboto}

svg:hover rect:not(:hover) { opacity: .5; }

.cards text{
  font-size:12px;

  
}
.cards text:hover {
  font-size:16px;
  color:white;
  
}
body{
  font-family:Roboto;
}
.reg{
  font-family:Roboto;
  color:#ccc;
  font-size:10px;
}

#chart{
  margin:auto;
  width:100%;
  color:steelblue;
}
.legend text{
  font-size:10px;
}

.labels{
  font-size: 10px;
}


&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;script src=&#34;https://shakraz.github.io/js/d3.js&#34;&gt;&lt;/script&gt; 
&lt;div class=&#34;tooltip&#34;&gt; &lt;/div&gt;
  &lt;div id=&#34;chart&#34;&gt;
  &lt;/div&gt;
&lt;script src=&#34;https://shakraz.github.io/js/heatmap.js&#34;&gt;&lt;/script&gt; 
&lt;/body&gt; 
&lt;/html&gt;
&lt;h2 id=&#34;вывод&#34;&gt;Вывод&lt;/h2&gt;
&lt;p&gt;Все плохо, ребята.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Депутатские запросы сенаторов РК. 6 созыв</title>
       <link>https://shakraz.github.io/blogs/deputies/</link>
       <pubDate>Sun, 15 Mar 2020 12:15:04 -0400</pubDate>
       
       <guid>https://shakraz.github.io/blogs/deputies/</guid>
       <description>&lt;h2 id=&#34;идея&#34;&gt;Идея&lt;/h2&gt;
&lt;p&gt;Визуализировать деятельность депутатов Сената РК 6 созыва.&lt;/p&gt;
&lt;h2 id=&#34;данные&#34;&gt;Данные&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Данные взяты с сайта &lt;a href=&#34;http://senate.parlam.kz/ru-RU/dep-requests&#34;&gt;Сената РК&lt;/a&gt; методом скраппинга.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://senate.parlam.kz/ru-RU/about/deputies&#34;&gt;Список депутатов&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;реализация&#34;&gt;Реализация&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Вовлеченность: количество участий в общих депутатских запросах&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Инициативность: Количество запросов, в которых депутат был инициатором&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;html dir=&#34;ltr&#34; lang=&#34;en&#34;&gt;
&lt;head&gt;
  &lt;meta charset=&#34;utf-8&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;https://shakraz.github.io/css/deputies.css&#34;&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;script src=&#34;https://shakraz.github.io/js/d3.js&#34;&gt;&lt;/script&gt; 
  &lt;div id=&#34;chart&#34;&gt;
  &lt;/div&gt;
&lt;script src=&#34;https://shakraz.github.io/js/scatter.js&#34;&gt;&lt;/script&gt; 
&lt;/body&gt; 
&lt;/html&gt;
&lt;h2 id=&#34;вывод&#34;&gt;Вывод&lt;/h2&gt;
&lt;p&gt;Депутаты, попавшие в Сенат через указ президента наименее вовлеченные и инициативные
Хочу сделать wordcloud на основе описания запроса, думаю, будет интересно&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
